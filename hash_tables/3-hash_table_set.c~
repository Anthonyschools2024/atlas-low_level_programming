#include "hash_tables.h"

/**
 * struct hash_node_s - A node of a hash table
 * @key: The key
 * @value: The value associated with the key
 * @next: Pointer to the next node
 */
typedef struct hash_node_s
{
    char *key;
    char *value;
    struct hash_node_s *next;
} hash_node_t;

/**
 * struct hash_table_s - A hash table
 * @size: Size of the hash table
 * @array: An array of pointers to the head of each list in the hash table
 */
typedef struct hash_table_s
{
    unsigned long int size;
    hash_node_t **array;
} hash_table_t;

/**
 * hash_djb2 - A simple hash function
 * @str: The string to hash
 *
 * Return: The hashed value
 */
unsigned long int hash_djb2(const char *str)
{
    unsigned long int hash = 5381;
    int c;

    while ((c = *str++))
        hash = ((hash << 5) + hash) + c; /* hash * 33 + c */

    return hash % HASH_TABLE_SIZE;
}

/**
 * hash_table_set - Adds an element to the hash table
 * @ht: The hash table
 * @key: The key
 * @value: The value associated with the key
 *
 * Return: 1 if it succeeded, 0 otherwise
 */
int hash_table_set(hash_table_t *ht, const char *key, const char *value)
{
    unsigned long int index;
    hash_node_t *new_node = malloc(sizeof(hash_node_t));
    hash_node_t *temp;

    if (!new_node)
        return (0);

    new_node->key = strdup(key);
    new_node->value = strdup(value);
    new_node->next = NULL;

    if (!new_node->key || !new_node->value)
    {
        free(new_node);
        return (0);
    }

    index = hash_djb2(key);
    temp = ht->array[index];

    if (!temp)
    {
        ht->array[index] = new_node;
    }
    else
    {
        new_node->next = temp;
        ht->array[index] = new_node;
    }

    return (1);
}

