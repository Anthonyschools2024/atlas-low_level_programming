#include "lists.h"

/**
 * struct dlistint_s - Doubly linked list node
 * @n: Integer stored in the node
 * @prev: Pointer to the previous node
 * @next: Pointer to the next node
 */
struct dlistint_s {
    int n;
    struct dlistint_s *prev;
    struct dlistint_s *next;
};

typedef struct dlistint_s dlistint_t;

/**
 * free_dlistint - Frees a doubly linked list
 * @head: Head of the doubly linked list
 *
 * This function traverses the doubly linked list starting from the head,
 * freeing each node and setting the next and prev pointers to NULL to
 * prevent dangling pointers.
 */
void free_dlistint(dlistint_t *head)
{
    dlistint_t *current = head;

    /* Handle edge case of an empty list */
    if (!head)
        return;

    /* Traverse and free each node */
    while (current != NULL)
    {
        dlistint_t *temp = current->next;
        current->prev->next = temp;
        if (temp != NULL)
            temp->prev = current->prev;
        current->prev = NULL;
        current->next = NULL;
        free(current);
        current = temp;
    }
}
